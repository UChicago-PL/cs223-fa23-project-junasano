Midway progress report:


Fractals:

So far we have spent a significant amount of time diving into the documentation and 
learning about the Diagrams library and its associated functions and syntax. We then 
began developing fractals, starting with the Sierpinski Triangle, and continuing with 
the Pythagorean Tree, Heighway dragon fractal, Koch Snowflake, and Mandelbrot set (this one was adapted from 
an online solution).
The general structure we follow to figure out how to represent these fractals in haskell is 
to find thier mathmatical definition (on Wikipedia or elsewhere) and then iteratively try
to build these fractals using some recursive solution in haskell with the diagrams library.

Command line interface:

We want users to be able to specify the type of fractal they want to build on the command line
using commands and the associated arguments that a fractal takes (like number of iterations). In 
order to do this we are utilizing the options.applicative library along with a fractal parser function
(which utilizes subparsers), and a custom Fractal datatype which specifies the required arguments.

This is currently a work in progress but we want to develop this into a sophisticated interface
that can also be used to create animations.

Next Steps:

Before our presentation next week we want to implement 2 big features. Firstly, we want to finalize
our command line interface to be sophisticated and provide a range of options to users as arguments
for rendering different fractals.

The next feature we want to implement is animations. We know that animations are supported in the diagrams
library so we will begin by attempting to utilize that structure to develop the animations (which will result 
in a series of images), we will then find a library to convert the images into a gif which we will display to
the user.



Below is a copy of the original README that was used to provide updates. The current README has all of the updated information regarding how to run, etc. 


We are going to use this readme to document our progress as we work through the final project, and to help each other out with setup and execution.

## Starting out:

In order to run this project, I have created a .cabal file with the necessary build dependencies. To make sure this project runs on your computer, make sure to run:

`cabal update`
`cabal install --dependencies-only`
`cabal build`

You should then be ready to go with running the project. Keep in mind I have placed the haskell files in a folder called "app".

When you want to run Main.hs in order to get an output (like an image), you will not be able to just run `cabal run`. Instead, you must run something like the following: 
`cabal run -- cs223-fa23-project-junasano -o output.svg -w 400`
this specifies the name of the project to run, the -o flag indicates the output file, and the -w flag indicates the width of the output image. After running a command like this, you should see the output file in the directory.

You can specify other flags, I recommend checking out the following link which I have been using the get started: https://diagrams.github.io/doc/quickstart.html.


## UPDATE ON COMMAND LINE PARSER:
I created a basic parser for snowflake, sierpinski, and tree fractals (havent gotten to the mandelbrot one yet bc its more complicated). you can now run the program with a command like the following:
cabal run -- cs223-fa23-project-junasano [fractalname] -i [number of iterations]
for instance:
cabal run -- cs223-fa23-project-junasano tree -i 6

Do do this I got rid of the mainWith function and I am using Options.Applicative along with the renderSVG function from Diagrams.Backend.SVG.

We now need to make this work for the mandelbrot fracal which requires more inputs and also support animation

